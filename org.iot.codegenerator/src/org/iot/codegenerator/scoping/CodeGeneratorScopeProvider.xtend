/*
 * generated by Xtext 2.20.0
 */
package org.iot.codegenerator.scoping

import java.util.Collections
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.iot.codegenerator.codeGenerator.Board
import org.iot.codegenerator.codeGenerator.Cloud
import org.iot.codegenerator.codeGenerator.CodeGeneratorPackage
import org.iot.codegenerator.codeGenerator.Data
import org.iot.codegenerator.codeGenerator.Fog
import org.iot.codegenerator.codeGenerator.Map
import org.iot.codegenerator.codeGenerator.Pipeline
import org.iot.codegenerator.codeGenerator.Provider

import static extension org.eclipse.emf.ecore.util.EcoreUtil.*
import static extension org.eclipse.xtext.EcoreUtil2.*

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class CodeGeneratorScopeProvider extends AbstractCodeGeneratorScopeProvider {

	override getScope(EObject context, EReference reference) {
		val codeGen = CodeGeneratorPackage.eINSTANCE
		switch (reference) {
			case codeGen.reference_Variable:
				context.variableScope
			case codeGen.transformationOut_Source,
			case codeGen.channelOut_Source:
				context.variablesScope
			case codeGen.transformation_Provider:
				context.transInIdScope
			default:
				super.getScope(context, reference)
		}
	}

	def private IScope getVariableScope(EObject context) {
		val mapContainer = context.getContainerOfType(Pipeline)?.eContainer()?.getContainerOfType(Map)
		if (mapContainer !== null) {
			Scopes.scopeFor((Collections.singleton(mapContainer.output)))
		} else {
			val providerContainer = context.eContainer.getContainerOfType(Provider)
			Scopes.scopeFor(providerContainer.variables.ids)
		}
	}
	
	def private IScope getVariablesScope(EObject context) {
		Scopes.scopeFor(Collections.singleton(context.getContainerOfType(Provider).variables))
	}

	def private IScope getTransInIdScope(EObject context) {
		var scope = context.eContainer.getContainerOfType(Cloud)?.getOutputDefinitionsFrom(Board, Fog)
		if (scope === null) {
			scope = context.eContainer.getContainerOfType(Fog)?.getOutputDefinitionsFrom(Board)
			if (scope === null) {
				return IScope.NULLSCOPE
			}
			return Scopes.scopeFor(scope)
		}
		return Scopes.scopeFor(scope)
	}

	def private Iterable<Data> getOutputDefinitionsFrom(EObject context, Class<? extends EObject>... types) {
		types.flatMap [
			context.getSiblingsOfType(it).allContents.filter(Data).toIterable
		]
	}
}
